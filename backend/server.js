// backend/server.js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const morgan = require('morgan');
const path = require('path');
const { Actor, HttpAgent } = require('@dfinity/agent');
const { idlFactory } = require('../icp-canister-declarations/hefin_canister'); // Generated by dfx

// Import routes
const authRoutes = require('./routes/auth');
const healthRoutes = require('./routes/health');
const financeRoutes = require('./routes/finance');

const app = express();

// Middleware
app.use(cors()); // Enable CORS for all routes
app.use(express.json()); // Parse JSON request bodies
app.use(morgan('dev')); // Logger for development

// Connect to MongoDB
const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('MongoDB Connected...');
    } catch (err) {
        console.error(err.message);
        process.exit(1); // Exit process with failure
    }
};
connectDB();

// DFINITY Agent Setup (Conceptual - for Node.js to interact with ICP)
let icpActor = null;
const setupIcpAgent = async () => {
    try {
        const agent = new HttpAgent({
            host: process.env.ICP_HOST || 'http://127.0.0.1:4943', // Local replica or ICP mainnet gateway
        });

        // For local replica, fetch root key is needed
        if (process.env.NODE_ENV !== 'production' || process.env.ICP_HOST === 'http://127.0.0.1:4943') {
            await agent.fetchRootKey();
        }

        const canisterId = process.env.ICP_CANISTER_ID;
        if (!canisterId) {
            console.error('ICP_CANISTER_ID not set in environment variables.');
            return;
        }

        icpActor = Actor.createActor(idlFactory, {
            agent,
            canisterId,
        });
        console.log(`ICP Canister Actor created for ID: ${canisterId}`);
    } catch (error) {
        console.error('Error setting up ICP Agent:', error);
    }
};
setupIcpAgent();

// Make ICP actor available in requests (optional, or pass directly)
app.use((req, res, next) => {
    req.icpActor = icpActor;
    next();
});

// Define API routes
app.use('/api/auth', authRoutes);
app.use('/api/health', healthRoutes);
app.use('/api/finance', financeRoutes);

// Simple root route
app.get('/', (req, res) => {
    res.send('HEFIN Backend API is running!');
});

// Error handling middleware (optional, for more robust apps)
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Something broke!');
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server started on port ${PORT}`));
